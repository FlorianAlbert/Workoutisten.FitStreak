@using Workoutisten.FitStreak.Pages.Dialogs
@using Workoutisten.FitStreak.Data.Models.Workout

@page "/exercises"

@inject IDialogService _DialogService
@inject IRestClient _RestClient
@inject IConverterWrapper _Converter
@inject ErrorDialogService _ErrorDialogService

<MudGrid>
    <MudItem xs="10">
        <SearchBar SearchInput="@SearchInput" />
    </MudItem>
    <MudItem xs="2" Class="d-flex align-center justify-center">
        <AddButtonRounded ButtonClicked="@AddNewExercise" />
    </MudItem>
</MudGrid>

<MudPaper Class="rounded-xl p-2 my-3">
    <MudList>
        @foreach (var exercise in UserExercises)
        {
            <ExerciseListElement Category="@exercise.Category" Name="@exercise.Name" Description="@exercise.Description"/>
        }
    </MudList>
</MudPaper>


@code {

    string SearchInput { get; set; }

    List<ExerciseModel> UserExercises { get; set; } = new List<ExerciseModel>();

    

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                UserExercises = (await Task.WhenAll((await _RestClient.GetExercisesAsync()).Select(exercise => _Converter.ToEntity<Exercise, ExerciseModel>(exercise)))).ToList();
            }
            catch (ApiException<ProblemDetails> e)
            {
                await _ErrorDialogService.ShowErrorDialog(e.StatusCode.ToString(), e.Result.Detail);
            }
            catch (Exception e)
            {
                await _ErrorDialogService.ShowErrorDialog();
            }
        }

        StateHasChanged();

        base.OnAfterRenderAsync(firstRender);
    }

    public async void AddNewExercise()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                FullWidth = true
            };

        var DialogReference = _DialogService.Show<AddExerciseDialog>("New Exercise: ", options);

        var dialogResult = await DialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            try
            {
                var exercise = await _RestClient.CreateExerciseAsync(await _Converter.ToDto<ExerciseModel, Exercise>((ExerciseModel)dialogResult.Data));
                UserExercises.Add(await _Converter.ToEntity<Exercise, ExerciseModel>(exercise));
            }
            catch (ApiException<ProblemDetails> e)
            {
                await _ErrorDialogService.ShowErrorDialog(e.StatusCode.ToString(), e.Result.Detail);
            }
            catch (Exception e)
            {
                await _ErrorDialogService.ShowErrorDialog();
            }
        }

        StateHasChanged();
    }
}
