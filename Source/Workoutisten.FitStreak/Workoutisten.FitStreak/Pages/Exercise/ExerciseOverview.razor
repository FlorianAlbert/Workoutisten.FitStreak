@using Workoutisten.FitStreak.Data.Models.Workout
@using Workoutisten.FitStreak.Shared.Exercise

@page "/exercises/overview"
@*@page "/"*@

@inject IDialogService _DialogService

<MudGrid>
    <MudItem xs="5" Class="MudTextHiddenOverflow">
        <MudText Typo="Typo.h5">@WorkoutName</MudText>
    </MudItem>
    <MudItem xs="3">
        <MudButton Class="rounded-xl" Color="Color.Warning" Variant="Variant.Filled" OnClick="CancelExercise"><MudText Typo="Typo.button">CANCEL</MudText></MudButton>
    </MudItem>
    <MudItem xs="3">
        <FitStreakButton Label="COMPLETE" OnClick="@CompleteExercise" />
    </MudItem>
</MudGrid>

@if (CurrentExercise is not null)
{
    <MudPaper Class="rounded-xl p-2 my-3">
        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudIconButton Icon="@Icons.Filled.ArrowBackIos" Class="mr-5" OnClick="@GetPreviousExercise" />
            <MudText Typo="Typo.body1">@CurrentExercise.Name</MudText>
            <MudIconButton Icon="@Icons.Filled.ArrowForwardIos" Class="ml-5" OnClick="@GetNextExercise" />
        </MudStack>

        <MudDivider Style="padding: 2px" Class="Foreground: white my-2" />

        <MudGrid>
            <MudItem xs="12">
                @if (CurrentExercise.Category == ExerciseCategoryEnum.Cardio)
                {
                    <ExerciseSetView CardioExerciseSet="NewCardioExerciseSetModel" ExerciseCategory="CurrentExercise.Category" />
                }
                else
                {
                    <ExerciseSetView StrengthExerciseSet="NewStrengthExerciseSetModel" ExerciseCategory="CurrentExercise.Category" />
                }
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                    @if (CurrentExercise.Category == ExerciseCategoryEnum.Cardio)
                    {
                        <FitStreakButton Label="ADD SET" OnClick="( () => AddSet(NewCardioExerciseSetModel))" />
                    }
                    else
                    {
                        <FitStreakButton Label="ADD SET" OnClick="( () => AddSet(NewStrengthExerciseSetModel))" />
                    }
                </MudStack>
            </MudItem>
        </MudGrid>

        <MudDivider Style="padding: 2px" Class="Foreground: white my-4" />

        <MudStack Spacing="2" Class="AutoScrollSetStack">
            <MudText Typo="Typo.body1"><b>Completed:</b></MudText>
            <MudDivider Class="mud-theme-primary" DividerType="DividerType.FullWidth" />
            @if (CurrentExercise.Category == ExerciseCategoryEnum.Strength)
            {

                foreach (var set in StrengthExerciseSets[CurrentExercise])
                {
                    <MudGrid>
                        <MudItem xs="3" Class="d-flex align-start justify-end">
                            <MudText Typo="Typo.body1">@set.Name :</MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex justify-center">
                            <MudText Typo="Typo.body1"><b>@set.Reps</b> Reps</MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex justify-start">
                            <MudText Typo="Typo.body1"><b>@set.Weight</b> Kg</MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex justify-end">
                            <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="() => EditSet(set, CurrentExercise.Category)" />
                                <MudIconButton Icon="@Icons.Filled.Remove" Size="Size.Small" />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                    <MudDivider Class="mud-theme-primary" DividerType="DividerType.FullWidth" />
                }
            }
            else
            {
                foreach(var set in CardioExerciseSets[CurrentExercise])
                {
                    <MudGrid>
                        <MudItem xs="3" Class="d-flex align-start justify-end">
                            <MudText Typo="Typo.body1">@set.Name :</MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex justify-center">
                            <MudText Typo="Typo.body1"><b> @(set.Duration.HasValue? ((System.TimeSpan)set.Duration).ToString(@"hh\:mm\:ss") : "00:00:00")</b></MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex justify-start">
                            <MudText Typo="Typo.body1"><b>@set.Distance</b> m</MudText>
                        </MudItem>
                        <MudItem xs="3" Class="d-flex justify-end">
                            <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                                <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="() => EditSet(set, CurrentExercise.Category)" />
                                <MudIconButton Icon="@Icons.Filled.Remove" Size="Size.Small" />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                    <MudDivider Class="mud-theme-primary" DividerType="DividerType.FullWidth" />
                }
            }
        </MudStack>
    </MudPaper>
}

<MudPaper Class="rounded-xl p-2 my-3">
    <MudGrid>
        @*<MudItem xs="1" />*@
        <MudItem xs="3" Class="d-flex justify-center">
            <MudIconButton Icon="@Icons.Filled.Refresh" Variant="Variant.Filled" Color="Color.Primary" Class="rounded-circle p-2" />
        </MudItem>
        <MudItem xs="1" Class="d-flex justify-end align-center">
            <MudIconButton Icon="@Icons.Filled.Remove" Variant="Variant.Filled" Color="Color.Dark" Class="rounded-circle" OnClick="( () => Task.Run( () => TimerValue = (TimerValue.TotalSeconds == 15)? TimerValue : TimerValue.Subtract(new System.TimeSpan(0, 0, 15))))" />
        </MudItem>
        <MudItem xs="4" Class="d-flex justify-center align-center">
            <MudButton OnClick="() => EditTime()"><MudText Typo="Typo.h5"><b>@TimerValue.ToString(@"hh\:mm\:ss")</b></MudText></MudButton>
        </MudItem>
        <MudItem xs="1" Class="d-flex justify-start align-center">
            <MudIconButton Icon="@Icons.Filled.Add" Variant="Variant.Filled" Color="Color.Dark" Class="rounded-circle" OnClick="( () => Task.Run( () => TimerValue = TimerValue.Add(new System.TimeSpan(0, 0, 15))))" />
        </MudItem>
        <MudItem xs="3" Class="d-flex justify-center">
            <MudIconButton Icon="@Icons.Filled.PlayArrow" Variant="Variant.Filled" Color="Color.Primary" Size=Size.Large Class="rounded-circle" />
        </MudItem>
        @*<MudItem xs="1" />*@
    </MudGrid>
</MudPaper>

