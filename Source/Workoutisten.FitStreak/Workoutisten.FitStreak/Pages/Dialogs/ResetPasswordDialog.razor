@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Workoutisten.FitStreak.Data.Models.User

@inject IRestClient _RestClient
@inject IConverterWrapper _Converter

<MudDialog>
    <DialogContent>
        @if (ServerError)
        {
            <MudText Typo="Typo.body1" Color="Color.Primary">We ran into some problems trying to reach the server. Please try again in a few minutes.</MudText>
        }
        @if (EmailSent)
        {

            <MudText Typo="Typo.body2">We just sent you an E-Mail with an eight symbol verification code.<br /> Enter the code, your Email and your new password to get right back to your streak</MudText>

            <MudStack Spacing="3">
                <MudTextField T="string" Counter="8" Immediate="true" Label="Code" Variant="Variant.Text" @bind-Value="_ResetPasswordModel.VerificationCode" />
                @if (WrongCode)
                {
                    <MudText Typo="Typo.body1" Color="Color.Primary">The code you entered was not correct.</MudText>
                }
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                          @bind-Value=_ResetPasswordModel.Email />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Please set your new password!"
                          @bind-Value=_ResetPasswordModel.NewPassword />
                <MudTextField T="string" Required="true"
                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))" />
            </MudStack>
        }
        else
        {
            <MudStack Spacing="3">
                <MudText Typo="Typo.body2">Enter the Email of your account</MudText>
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                          @bind-Value=_ResetPasswordModel.Email />
                @if (EmailNotFound)
                {
                    <MudText Typo="Typo.h6" Color="Color.Primary">We could not find your Email, please ensure you didn't make any typos</MudText>
                }
            </MudStack>
        }

    </DialogContent>
    <DialogActions>
        <MudContainer Class="d-flex justify-center my-3 ">
            @if (EmailSent)
            {
                <FitStreakButton Label="Save" OnClick="Submit" />
            }
            else
            {
                <MudStack Spacing="3" AlignItems="AlignItems.Center">
                    <FitStreakButton Label="Send" OnClick="SendEmail" />
                    <MudButton OnClick="() => EmailSent = true" Class="d-flex justify-center mt-3" FullWidth="true">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary"><u>I already have a code</u></MudText>
                    </MudButton>
                </MudStack>
            }
        </MudContainer>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    ResetPasswordModel _ResetPasswordModel { get; set; } = new();

    bool EmailSent, ServerError, EmailNotFound, WrongCode;

    async void Submit()
    {
        try
        {
            await _RestClient.ResetPasswordAsync(await _Converter.ToDto<ResetPasswordModel, ResetPassword>(_ResetPasswordModel));
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApiException e)
        {
            if (e.StatusCode == 401)
            {
                WrongCode = true;
            }
            else
            {
                ServerError = true;
            }
        }
        catch
        {
            ServerError = true;
        }
    }

    void SendEmail()
    {
        if (!string.IsNullOrEmpty(_ResetPasswordModel.Email))
        {
            try
            {
                _RestClient.RequestPasswordResetAsync(new ResetPasswordRequest() { Email = _ResetPasswordModel.Email });
                EmailSent = true;
            }
            catch (ApiException e)
            {
                if (e.StatusCode == 404)
                {
                    EmailNotFound = true;
                }
                else
                {
                    ServerError = true;
                }
            }
            catch (Exception e)
            {
                ServerError = true;
            }
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string confirmedPassword)
    {
        if (!_ResetPasswordModel.NewPassword.Equals(confirmedPassword))
            return "Passwords don't match";
        return null;
    }
}
