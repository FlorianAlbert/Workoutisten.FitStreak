@using Workoutisten.FitStreak.Data.Models.Workout
@using Workoutisten.FitStreak.Pages.Dialogs
@using Workoutisten.FitStreak.Shared.PageExclusives.WorkoutsPage

@page "/workouts"

@inject IDialogService _DialogService
@inject IRestClient _RestClient
@inject IConverterWrapper _Converter
@inject ErrorDialogService _ErrorDialogService

<MudGrid>
    <MudItem xs="10">
        <SearchBar SearchInput="@SearchInput" />
    </MudItem>
    <MudItem xs="2" Class="d-flex align-center justify-center ">
        <AddButtonRounded ButtonClicked="@AddNewWorkout" />
    </MudItem>
</MudGrid>

<MudPaper Class="rounded-xl p-2 my-3">
    <MudList>
        @foreach (var workout in UserWorkouts)
        {
            <WorkoutListElement Description="@workout.Description" LastTraining="@workout.LastTraining.ToString()" Title="@workout.WorkoutName" />
        }
    </MudList>
</MudPaper>

@code {

    string SearchInput { get; set; }

    List<WorkoutModel> UserWorkouts { get; set; }

    List<ExerciseModel> UserExercises { get; set; }

    protected async override void OnInitialized()
    {

        try
        {
            UserWorkouts = (List<WorkoutModel>)_RestClient.GetWorkoutsAsync().Result.ToList().Select(workout => _Converter.ToEntity<Workout, WorkoutModel>(workout));
            UserExercises = (List<ExerciseModel>)(await Task.Run( () => _RestClient.GetExercisesAsync().Result.ToList().Select(exercise => _Converter.ToEntity<Exercise, ExerciseModel>(exercise))));
        }
        catch (ApiException<ProblemDetails> e)
        {
            await _ErrorDialogService.ShowErrorDialog(e.StatusCode.ToString(), e.Result.Detail);
        }
        catch (Exception e)
        {
            await _ErrorDialogService.ShowErrorDialog();
        }

        base.OnInitialized();
    }

    async void AddNewWorkout()
    {
        var parameters = new DialogParameters();
        parameters.Add("UserExercises", UserExercises);

        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                FullWidth = true,
            };
        var DialogReference = _DialogService.Show<AddWorkoutDialog>("New Workout: ", parameters, options);

        var dialogResult = await DialogReference.Result;

        if (!dialogResult.Cancelled)
        {
            var workoutResult = (WorkoutModel)dialogResult.Data;
            try
            {
                await _RestClient.CreateWorkoutAsync(await _Converter.ToDto<WorkoutModel, Workout>(workoutResult));
                UserWorkouts.Add(workoutResult);
            }
            catch (ApiException<ProblemDetails> e)
            {
                await _ErrorDialogService.ShowErrorDialog(e.StatusCode.ToString(), e.Result.Detail);
            }
            catch (Exception e)
            {
                await _ErrorDialogService.ShowErrorDialog();
            }

        }
        StateHasChanged();

    }
}
