@page "/history"
@using Workoutisten.FitStreak.Data.Models.Workout

@inject IRestClient _RestClient
@inject IConverterWrapper _Converter
@inject ErrorDialogService _ErrorDialogService

<MudText Class="m-3" Typo="Typo.h5" Align="Align.Center">History</MudText>
<MudDivider Class="Foreground: white" />
<MudTimeline TimelineAlign="TimelineAlign.Start" TimelinePosition="TimelinePosition.Left">
    @foreach (var exerciseGroup in DoneExerciseGroups)
    {
        <MudTimelineItem Color="Color.Primary" Elevation="25">
            <ItemContent>
                <MudPaper Elevation="3" Class="p-3">
                    <MudText Color="Color.Primary" Typo="Typo.caption" GutterBottom="true">@exerciseGroup.CreatedAt.ToString(@"D") </MudText>
                    <MudExpansionPanels>


                        @foreach (var doneExercise in exerciseGroup.DoneExercises)
                        {
                            <MudExpansionPanel Dense="true" Class="mud-theme-dark">
                                <TitleContent>
                                    <div class="d-flex gap-4">
                                        <MudIcon Icon="@Icons.Material.Filled.Sports" />
                                        <MudText><strong>@doneExercise.ExerciseModel.Name</strong></MudText>
                                        <MudText Color="Color.Primary">@(doneExercise.Sets.Count()+"\u00d7")</MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <MudDivider Class="mud-theme-primary" />
                                    <MudList Dense="true">
                                        @foreach (var set in doneExercise.Sets)
                                        {
                                            @if (set is StrengthExerciseSetModel strengthSet)
                                            {
                                                <MudListItem><MudText>@strengthSet.Name : @strengthSet.Reps Reps, @strengthSet.Weight kg</MudText></MudListItem>
                                                <MudDivider />
                                            }
                                            @if (set is CardioExerciseSetModel cardioSet)
                                            {
                                                <MudListItem><MudText>@cardioSet.Name : @cardioSet.Distance m, @cardioSet.Duration.Value.ToString(@"hh\:mm\:ss") </MudText></MudListItem>
                                                <MudDivider />
                                            }
                                        }
                                    </MudList>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudPaper>
            </ItemContent>
        </MudTimelineItem>
    }
</MudTimeline>

@code {
    List<ExerciseGroupModel> DoneExerciseGroups { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                DoneExerciseGroups = (await Task.WhenAll((await _RestClient.CallControlled(async c => await c.GetExerciseGroupsAsync())).Select(async exerciseGroup => await _Converter.ToEntity<ExerciseGroup, ExerciseGroupModel>(exerciseGroup)))).ToList();

                foreach (var group in DoneExerciseGroups)
                {
                    group.DoneExercises = (await Task.WhenAll((await _RestClient.CallControlled(async c => await c.GetDoneExercisesOfExerciseGroupAsync(group.ExerciseGroupId))).Select(async exercise => await _Converter.ToEntity<DoneExercise, DoneExerciseModel>(exercise)))).ToList();

                    foreach (var exercise in group.DoneExercises)
                    {
                        exercise.ExerciseModel = await _Converter.ToEntity<Exercise, ExerciseModel>(await _RestClient.CallControlled(c => c.GetExerciseAsync(exercise.ExerciseId)));

                        switch (exercise.ExerciseModel.Category)
                        {
                            case ExerciseCategoryEnum.Cardio:
                                exercise.Sets = (await Task.WhenAll((await _RestClient.CallControlled(async c => await c.GetCardioSetsOfDoneExerciseAsync(exercise.DoneExerciseId))).Select(async set => await _Converter.ToEntity<CardioSet, CardioExerciseSetModel>(set)))).Select(x => x as BaseExerciseSetModel).ToList();
                                break;
                            case ExerciseCategoryEnum.Strength:
                                exercise.Sets = (await Task.WhenAll((await _RestClient.CallControlled(async c => await c.GetStrengthSetsOfDoneExerciseAsync(exercise.DoneExerciseId))).Select(async set => await _Converter.ToEntity<StrengthSet, StrengthExerciseSetModel>(set)))).Select(x => x as BaseExerciseSetModel).ToList();
                                break;
                            default:
                                throw new Exception(); //TODO besseres error handling
                        }
                    }
                }

            }
            catch (ApiException<ProblemDetails> e)
            {
                await _ErrorDialogService.ShowErrorDialog(e.StatusCode.ToString(), e.Result.Detail);
            }
            catch (Exception e)
            {
                await _ErrorDialogService.ShowErrorDialog();
            }


            StateHasChanged();
        }
        base.OnAfterRenderAsync(firstRender);
    }
}
