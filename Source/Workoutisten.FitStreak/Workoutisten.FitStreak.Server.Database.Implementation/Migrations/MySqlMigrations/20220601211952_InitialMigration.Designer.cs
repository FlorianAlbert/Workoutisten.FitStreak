// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workoutisten.FitStreak.Server.Database.Implementation.DbContext;

#nullable disable

namespace Workoutisten.FitStreak.Server.Database.Implementation.Migrations.MySqlMigrations
{
    [DbContext(typeof(MySqlFitStreakDbContext))]
    [Migration("20220601211952_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EmailUser", b =>
                {
                    b.Property<Guid>("EmailsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReceiversId")
                        .HasColumnType("char(36)");

                    b.HasKey("EmailsId", "ReceiversId");

                    b.HasIndex("ReceiversId");

                    b.ToTable("EmailUser");
                });

            modelBuilder.Entity("ExerciseGroupUser", b =>
                {
                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParticipatedExerciseGroupsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ParticipantsId", "ParticipatedExerciseGroupsId");

                    b.HasIndex("ParticipatedExerciseGroupsId");

                    b.ToTable("ExerciseGroupUser");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<Guid>("MyFriendsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersIAmFriendOfId")
                        .HasColumnType("char(36)");

                    b.HasKey("MyFriendsId", "UsersIAmFriendOfId");

                    b.HasIndex("UsersIAmFriendOfId");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Account.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Account.FriendshipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RequestedUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RequestingUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RequestingUserId");

                    b.HasIndex("RequestedUserId", "RequestingUserId")
                        .IsUnique();

                    b.ToTable("FriendshipRequest");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxStreak")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordForgottenKey")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrationConfirmationKey")
                        .HasColumnType("longtext");

                    b.Property<int>("Streak")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.DoneExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ExerciseGroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExercisingUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseGroupId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("ExercisingUserId");

                    b.ToTable("DoneExercise");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DoneExerciseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoneExerciseId");

                    b.ToTable("Set");

                    b.HasDiscriminator<string>("Category");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.ExerciseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("WorkoutId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("ExerciseGroup");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.HasIndex("ExerciseId", "WorkoutId")
                        .IsUnique();

                    b.ToTable("WorkoutExercise");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.CardioSet", b =>
                {
                    b.HasBaseType("Workoutisten.FitStreak.Server.Model.Excercise.Set");

                    b.Property<double>("Distance")
                        .HasColumnType("double");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Cardio");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.StrengthSet", b =>
                {
                    b.HasBaseType("Workoutisten.FitStreak.Server.Model.Excercise.Set");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("Strength");
                });

            modelBuilder.Entity("EmailUser", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.Email", null)
                        .WithMany()
                        .HasForeignKey("EmailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", null)
                        .WithMany()
                        .HasForeignKey("ReceiversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseGroupUser", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Workout.ExerciseGroup", null)
                        .WithMany()
                        .HasForeignKey("ParticipatedExerciseGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", null)
                        .WithMany()
                        .HasForeignKey("MyFriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UsersIAmFriendOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Account.FriendshipRequest", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", "RequestedUser")
                        .WithMany("IngoingFriendshipRequests")
                        .HasForeignKey("RequestedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", "RequestingUser")
                        .WithMany("OutgoingFriendshipRequests")
                        .HasForeignKey("RequestingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedUser");

                    b.Navigation("RequestingUser");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.DoneExercise", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Workout.ExerciseGroup", "ExerciseGroup")
                        .WithMany("DoneExercises")
                        .HasForeignKey("ExerciseGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Excercise.Exercise", "Exercise")
                        .WithMany("ExerciseEntries")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", "ExercisingUser")
                        .WithMany("DoneExercises")
                        .HasForeignKey("ExercisingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("ExerciseGroup");

                    b.Navigation("ExercisingUser");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.Exercise", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", "Creator")
                        .WithMany("Exercises")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.Set", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Excercise.DoneExercise", "DoneExercise")
                        .WithMany("Sets")
                        .HasForeignKey("DoneExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoneExercise");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.ExerciseGroup", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Workout.Workout", "Workout")
                        .WithMany("ExerciseGroups")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.Workout", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Account.User", "Creator")
                        .WithMany("Workouts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.WorkoutExercise", b =>
                {
                    b.HasOne("Workoutisten.FitStreak.Server.Model.Excercise.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Workoutisten.FitStreak.Server.Model.Workout.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Account.User", b =>
                {
                    b.Navigation("DoneExercises");

                    b.Navigation("Exercises");

                    b.Navigation("IngoingFriendshipRequests");

                    b.Navigation("OutgoingFriendshipRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.DoneExercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Excercise.Exercise", b =>
                {
                    b.Navigation("ExerciseEntries");

                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.ExerciseGroup", b =>
                {
                    b.Navigation("DoneExercises");
                });

            modelBuilder.Entity("Workoutisten.FitStreak.Server.Model.Workout.Workout", b =>
                {
                    b.Navigation("ExerciseGroups");

                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
